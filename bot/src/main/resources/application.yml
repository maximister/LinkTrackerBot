app:
  telegram-token: ${BOT_TOKEN}

spring:
  application:
    name: bot
  jackson:
    time-zone: UTC
  cache:
    cache-names:
      - rate-limit-buckets
    caffeine:
      spec: maximumSize=100000,expireAfterAccess=3600s
  kafka:
    consumer:
      bootstrap-servers: localhost:9092
      group-id: bot
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"
        spring.json.value.default.type: edu.java.bot.model.controllerDto.LinkUpdate;
    producer:
      bootstrap-servers: localhost:9092
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.add.type.headers: false
    bootstrap-servers: localhost:9092

kafka-topic:
  name: scrapper-bot-mq
  partitions: 2
  replicas: 1

server:
  port: 8090

logging:
  config: classpath:log4j2-plain.xml


springdoc:
  swagger-ui:
    path: /swagger-ui

retry-config:
  retries:
    - client: scrapper
      type: exponential
      max-attempts: 3
      step: 2
      delay: 2s
      codes:
        - 500

bucket4j:
  enabled: true
  filters:
    - cache-name: rate-limit-bucket
      url: .*
      http-status-code: too_many_requests
      http-response-headers:
        Content-Type: "application/json; charset=utf-8"
      http-response-body: |
        {
          "description": "The number of requests from the current IP has been exceeded",
          "code": 429,
          "exceptionName": "Rate limit exceeded",
          "exceptionMessage": "You <b>exceeded </b> the number of available requests, please try again later"
        }
      rate-limits:
        - bandwidths:
            - capacity: 1
              time: 1
              unit: hours
              refill-speed: interval
          cache-key: getRemoteAddr()
          skip-condition: '@limitService.isSkipped(getRemoteAddr())'

rate-limiter:
  whitelist: 127.0.0.1
