app:
  scheduler:
    enable: true
    interval: 15s
    force-check-delay: 15s
  database-access-type: jdbc
  use-queue: true
  allowedUrlPatterns:
    - https://github.com/(?<owner>.+)/(?<repo>.+)
    - https://stackoverflow.com/questions/(\d+).*

spring:
  application:
    name: scrapper
  datasource:
    url: jdbc:postgresql://localhost:5437/scrapper
    username: postgres
    password: postgres
    driverClassName: org.postgresql.Driver
  jooq:
    sql-dialect: postgres
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: validate
    open-in-view: false
    show-sql: false
  cache:
    jcache:
      provider: com.github.benmanes.caffeine.jcache.spi.CaffeineCachingProvider
    cache-names:
      - rate-limit-bucket
    caffeine:
      spec: maximumSize=1000000,expireAfterAccess=3600s
  liquibase:
    enabled: false

management:
  metrics:
    tags:
      application: ${spring.application.name}
  server:
    port: 8081
  endpoints:
    web:
      base-path: /
      exposure:
        include: health, info, prometheus
      path-mapping:
        prometheus: metrics
  endpoint:
    health:
      enabled: true
      show-details: always
    info:
      enabled: true
    prometheus:
      enabled: true
  prometheus:
    metrics:
      export:
        enabled: true

server:
  port: 8080

logging:
  config: classpath:log4j2-plain.xml

springdoc:
  swagger-ui:
    path: /swagger-ui

kafka:
  bootstrapServers: localhost:9092
  client-id: bot
  acksMode: all
  deliveryTimeout: 60s
  lingerMs: 12_000
  batchSize: 100_000
  topic:
    name: scrapper-bot-mq
    partitions: 2
    replicas: 1



client:
  github:
    token: ${GITHUB_TOKEN:}
  stackoverflow:
    access-token: ${STACKOVERFLOW_ACCESS_TOKEN:}
    key: ${STACKOVERFLOW_KEY:}

retry-config:
  retries:
    - client: bot
      type: exponential
      max-attempts: 5
      step: 2
      delay: 2s
      codes:
        - 500
    - client: github
      type: exponential
      max-attempts: 5
      step: 2
      delay: 2s
      codes:
        - 500
    - client: stackoverflow
      type: exponential
      max-attempts: 5
      step: 2
      delay: 2s
      codes:
        - 500


bucket4j:
  enabled: true
  filters:
    - cache-name: rate-limit-bucket
      url: .*
      http-status-code: too_many_requests
      http-response-headers:
        Content-Type: "application/json; charset=utf-8"
      http-response-body: |
        {
         "description": "The number of requests from the current IP has been exceeded",
         "code": 429,
         "exceptionName": "Rate limit exceeded",
         "exceptionMessage": "You <b>exceeded </b> the number of available requests, please try again later"
        }
      rate-limits:
        - bandwidths:
            - capacity: 1
              time: 1
              unit: hours
              refill-speed: interval
          cache-key: getRemoteAddr()
          skip-condition: '@limitService.isSkipped(getRemoteAddr())'

rate-limiter:
  whitelist: 127.0.0.1
